// Code generated by mockery v2.52.2. DO NOT EDIT.

package openhab

import (
	event "github.com/creativeprojects/gopenhab/event"
	cron "github.com/robfig/cron/v3"
	mock "github.com/stretchr/testify/mock"
)

// mockSubscriber is an autogenerated mock type for the subscriber type
type mockSubscriber struct {
	mock.Mock
}

// getCron provides a mock function with no fields
func (_m *mockSubscriber) getCron() *cron.Cron {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getCron")
	}

	var r0 *cron.Cron
	if rf, ok := ret.Get(0).(func() *cron.Cron); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cron.Cron)
		}
	}

	return r0
}

// subscribe provides a mock function with given fields: name, eventType, callback
func (_m *mockSubscriber) subscribe(name string, eventType event.Type, callback func(event.Event)) int {
	ret := _m.Called(name, eventType, callback)

	if len(ret) == 0 {
		panic("no return value specified for subscribe")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, event.Type, func(event.Event)) int); ok {
		r0 = rf(name, eventType, callback)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// unsubscribe provides a mock function with given fields: subID
func (_m *mockSubscriber) unsubscribe(subID int) {
	_m.Called(subID)
}

// newMockSubscriber creates a new instance of mockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSubscriber {
	mock := &mockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
